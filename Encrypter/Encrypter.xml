<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Encrypter</name>
    </assembly>
    <members>
        <member name="F:Encrypter.CryptoProcessor.ITERATIONS_YEAR_2020">
            <summary>
            The number of iterations for the year 2020.
            </summary>
        </member>
        <member name="M:Encrypter.CryptoProcessor.Encrypt(System.String,System.String,System.Int32)">
            <summary>
            Encrypts a string by means of AES. The result gets base64 encoded.
            Due to the necessary millions of SHA512 iterations, the methods runs at least several seconds in the year 2020 (approx. 5-7s).
            This method suits for small data such as telegrams, JSON data, text notes, passwords, etc. For larger
            data, might use the stream overload. Rule of thumb: If the data could be stored three times in
            the present memory, this method could be used.
            </summary>
            <param name="data">The UTF8 encoded string to encrypt.</param>
            <param name="password">The password. Must consists of 6 chars or more.</param>
            <param name="iterations">The number of iterations to derive the key. Should not be adjusted. The default is secure for the current time.</param>
            <returns>The base64 encoded and encrypted string. The string is ASCII encoding.</returns>
        </member>
        <member name="M:Encrypter.CryptoProcessor.Encrypt(System.IO.Stream,System.IO.Stream,System.String,System.Int32)">
             <summary>
             Encrypts a given input stream and writes the encrypted data to the provided output stream. A buffer stream
             gets used in front of the output stream. This method expects, that both streams are read-to-use e.g. the
             input stream is at the desired position and the output stream is writable, etc. This method disposes the
             internal crypto streams. Thus, the input and output streams might get disposed as well. Please note, that
             this method writes binary data without e.g. base64 encoding.
            
             When the task finished, the entire encryption of the input stream is done.
             </summary>
             <param name="inputStream">The desired input stream. The encryption starts at the current position.</param>
             <param name="outputStream">The desired output stream. The encrypted data gets written to the current position.</param>
             <param name="password">The encryption password.</param>
             <param name="iterations">The desired number of iterations to create the key. Should not be adjusted. The default is secure for the current time.</param>
        </member>
        <member name="M:Encrypter.CryptoProcessor.Decrypt(System.String,System.String,System.Int32)">
            <summary>
            Decrypts an base64 encoded and encrypted string. Due to the necessary millions of SHA512 iterations,
            the methods runs at least several seconds in the year 2020 (approx. 5-7s).
            This method suits for small data such as telegrams, JSON data, text notes, passwords, etc. For larger
            data, might use the stream overload. Rule of thumb: If the data could be stored three times in
            the present memory, this method could be used.
            </summary>
            <param name="base64EncodedAndEncryptedData">The base64 encoded and AES encrypted string. This string must be ASCII encoded.</param>
            <param name="password">The password. Must consists of 6 chars or more.</param>
            <param name="iterations">The number of iterations to derive the key. Should not be adjusted. The default is secure for the current time.</param>
            <returns>The decrypted UTF8 encoded string.</returns>
        </member>
        <member name="M:Encrypter.CryptoProcessor.Decrypt(System.IO.Stream,System.IO.Stream,System.String,System.Int32)">
             <summary>
             Decrypts a given input stream and writes the decrypted data to the provided output stream. A buffer stream
             gets used in front of the output stream. This method expects, that both streams are read-to-use e.g. the
             input stream is at the desired position and the output stream is writable, etc. This method disposes the
             internal crypto streams. Thus, the input and output streams might get disposed as well. Please note, that
             this method writes binary data without e.g. base64 encoding.
            
             When the task finished, the entire decryption of the input stream is done.
             </summary>
             <param name="inputStream">The desired input stream. The decryption starts at the current position.</param>
             <param name="outputStream">The desired output stream. The decrypted data gets written to the current position.</param>
             <param name="password">The encryption password.</param>
             <param name="iterations">The desired number of iterations to create the key. Should not be adjusted. The default is secure for the current time.</param>
        </member>
        <member name="M:Encrypter.CryptoProcessor.UpgradeIterations(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Upgrades the encryption regarding the used iterations for the key.
            </summary>
            <param name="encryptedDataBeforeUpgrade">The encrypted data with the previous settings.</param>
            <param name="password">The password.</param>
            <param name="previousIterations">The previous number of iterations.</param>
            <param name="upgradedIterations">The upgraded number of iterations.</param>
            <returns>The re-encrypted data.</returns>
        </member>
        <member name="M:Encrypter.CryptoProcessor.UpgradeIterations(System.IO.Stream,System.IO.Stream,System.String,System.Int32,System.Int32)">
            <summary>
            Upgrades the encryption regarding the used iterations for the key. In order to re-encrypt the stream, a temporary file
            gets used. When the returned task is finished, the re-encryption is done as well.
            </summary>
            <param name="inputStreamBeforeUpgrade">The encrypted data with the previous settings.</param>
            <param name="outputStreamUpgraded">The re-encrypted data.</param>
            <param name="password">The password.</param>
            <param name="previousIterations">The previous number of iterations.</param>
            <param name="upgradedIterations">The upgraded number of iterations.</param>
        </member>
        <member name="M:Encrypter.CryptoProcessor.ChangePassword(System.String,System.String,System.String,System.Int32)">
            <summary>
            Changes the password of the encryption.
            </summary>
            <param name="encryptedDataBeforeChange">With the previous password encrypted data.</param>
            <param name="previousPassword">The previous password.</param>
            <param name="newPassword">The new password.</param>
            <param name="iterations">The used iterations.</param>
            <returns>The re-encrypted data.</returns>
        </member>
        <member name="M:Encrypter.Extensions.Encrypt(System.String,System.String,System.Int32)">
            <summary>
            Encrypts this string by means of AES. The result gets base64 encoded.
            Due to the necessary millions of SHA512 iterations, the methods runs at least several seconds in the year 2020 (approx. 5-7s).
            This method suits for small data such as telegrams, JSON data, text notes, passwords, etc. For larger
            data, might use the stream overload. Rule of thumb: If the data could be stored three times in
            the present memory, this method could be used.
            </summary>
            <param name="data">This UTF8 encoded string to encrypt.</param>
            <param name="password">The password. Must consists of 6 chars or more.</param>
            <param name="iterations">The number of iterations to derive the key. Should not be adjusted. The default is secure for the current time.</param>
            <returns>The base64 encoded and encrypted string. The string is ASCII encoding.</returns>
        </member>
        <member name="M:Encrypter.Extensions.Encrypt(System.IO.Stream,System.IO.Stream,System.String,System.Int32)">
             <summary>
             Encrypts a given input stream and writes the encrypted data to the provided output stream. A buffer stream
             gets used in front of the output stream. This method expects, that both streams are read-to-use e.g. the
             input stream is at the desired position and the output stream is writable, etc. This method disposes the
             internal crypto streams. Thus, the input and output streams might get disposed as well. Please note, that
             this method writes binary data without e.g. base64 encoding.
            
             When the task finished, the entire encryption of the input stream is done.
             </summary>
             <param name="inputStream">The desired input stream. The encryption starts at the current position.</param>
             <param name="outputStream">The desired output stream. The encrypted data gets written to the current position.</param>
             <param name="password">The encryption password.</param>
             <param name="iterations">The number of iterations to derive the key. Should not be adjusted. The default is secure for the current time.</param>
        </member>
        <member name="M:Encrypter.Extensions.Decrypt(System.String,System.String,System.Int32)">
            <summary>
            Decrypts an base64 encoded and encrypted string. Due to the necessary millions of SHA512 iterations,
            the methods runs at least several seconds in the year 2020 (approx. 5-7s).
            This method suits for small data such as telegrams, JSON data, text notes, passwords, etc. For larger
            data, might use the stream overload. Rule of thumb: If the data could be stored three times in
            the present memory, this method could be used.
            </summary>
            <param name="data">The base64 encoded and AES encrypted string. This string must be ASCII encoded.</param>
            <param name="password">The password. Must consists of 6 chars or more.</param>
            <param name="iterations">The number of iterations to derive the key. Should not be adjusted. The default is secure for the current time.</param>
            <returns>The decrypted UTF8 encoded string.</returns>
        </member>
        <member name="M:Encrypter.Extensions.Decrypt(System.IO.Stream,System.IO.Stream,System.String,System.Int32)">
             <summary>
             Decrypts a given input stream and writes the decrypted data to the provided output stream. A buffer stream
             gets used in front of the output stream. This method expects, that both streams are read-to-use e.g. the
             input stream is at the desired position and the output stream is writable, etc. This method disposes the
             internal crypto streams. Thus, the input and output streams might get disposed as well. Please note, that
             this method writes binary data without e.g. base64 encoding.
            
             When the task finished, the entire decryption of the input stream is done.
             </summary>
             <param name="inputStream">The desired input stream. The decryption starts at the current position.</param>
             <param name="outputStream">The desired output stream. The decrypted data gets written to the current position.</param>
             <param name="password">The encryption password.</param>
             <param name="iterations">The number of iterations to derive the key. Should not be adjusted. The default is secure for the current time.</param>
        </member>
    </members>
</doc>
